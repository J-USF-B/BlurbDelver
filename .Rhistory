knitr::opts_chunk$set(echo = TRUE)
TokenizeText <- function(text) {
unlist(strsplit(text, "\\s+"))
}
# Example
TokenizeText("This is an example tweet!")
plot(pressure)
SentimentAnalysis <- function(text) {
# Actual implementation to follow
list(positive = 5, negative = 2, neutral = 3)
}
# Example
SentimentAnalysis("This is a fantastic day, but it could be better.")
CreateWordCloud <- function(text) {
# Actual implementation to follow
cat("Word cloud coming soon..")
}
# Example
CreateWordCloud("This is an example tweet!")
SentimentAnalysis <- function(text) {
# Actual implementation to follow
list(positive = 5, negative = 2, neutral = 3)
}
# Example
SentimentAnalysis("This is a fantastic day, but it could be better.")
library(tidyverse)
library(stringr)
library(tidytext)
install.packages("tidyverse")
install.packages("stringr")
install.packages("tidytext")
install.packages("tidyverse")
devtools::load_all()
TokenizeText("This restaurant exceeded expectations with its delicious food and friendly service!")
tokens <- TokenizeText("This restaurant exceeded expectations with its delicious food and friendly service!")
SentimentTokenized(tokens)
devtools::load_all()
tokens <- TokenizeText("This restaurant exceeded expectations with its delicious food and friendly service!")
SentimentTokenized(tokens)
sentiment_results <- SentimentTokenized(tokens)
CreateSentimentWordCloud(sentiment_results, tokens)
wordcloud <- CreateSentimentWordCloud(sentiment_results, tokens)
devtools::load_all()
tokens <- TokenizeText("This restaurant exceeded expectations with its delicious food and friendly service!")
sentiment_results <- SentimentTokenized(tokens)
wordcloud <- CreateSentimentWordCloud(sentiment_results, tokens)
devtools::load_all()
tokens <- TokenizeText("This restaurant exceeded expectations with its delicious food and friendly service!")
sentiment_results <- SentimentTokenized(tokens)
wordcloud <- CreateSentimentWordCloud(sentiment_results, tokens)
wordcloud <- CreateSentimentWordCloud(sentiment_results, tokens)
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
View(sentiment)
devtools::load_all()
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
View(sentiment)
View(tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
sentiment <- SentimentAnalysis(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible")
sentiment <- SentimentAnalysis(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible")
sentiment <- SentimentTokenized(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
()
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible")
sentiment <- SentimentTokenized(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible")
sentiment <- SentimentTokenized(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
tokenized <- TokenizeText("This is wonderful and amazing but also terrible")
sentiment <- SentimentTokenized(tokenized)
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
# Raw text input
text <- "This is wonderful and amazing but also terrible."
# Tokenize the raw text first
tokenized <- TokenizeText(text)
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
# Raw text input
text <- "This is wonderful and amazing but also terrible."
# Tokenize the raw text first
tokenized <- TokenizeText(text)
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
# Raw text input
text <- "This is wonderful and amazing but also terrible."
# Tokenize the raw text first
tokenized <- TokenizeText(text)
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
# Raw text input
text <- "This is wonderful and amazing but also terrible."
# Tokenize the text
tokenized <- TokenizeText(text)
# Check the structure of the tokenized object
print(head(tokenized))  # Debugging output
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Check the structure of the sentiment data
print(head(sentiment))  # Debugging output
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
text <- "This is wonderful and amazing but also terrible."
# Tokenize the text
tokenized <- TokenizeText(text)
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Check the structure of the sentiment data
print(head(sentiment))  # Debugging output
# Now create the word cloud
CreateSentimentWordCloud(sentiment, tokenized)
library(wordcloud2)
# Check that 'freq' is numeric and no missing values
sentiment$freq <- as.numeric(as.character(sentiment$freq))
devtools::load_all()
text <- "This is wonderful and amazing but also terrible."
# Tokenize the text
tokenized <- TokenizeText(text)
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Check the structure of the sentiment data
print(head(sentiment))  # Debugging output
# Now create the word cloud
CreateSentimentWordCloud(sentiment, tokenized)
# Manually test wordcloud2 with sentiment data
library(wordcloud2)
# Check that 'freq' is numeric and no missing values
sentiment$freq <- as.numeric(as.character(sentiment$freq))
# Print the structure of sentiment data
print(head(sentiment))
# Create the word cloud directly
wordcloud2(sentiment, size = 0.5, color = sentiment$color)
# Manually test wordcloud2 with sentiment data
library(wordcloud2)
library(dplyr)
# Check the structure of sentiment data
str(sentiment)  # Check if 'freq' is numeric and if 'color' is properly formatted
# Check for any missing or non-numeric 'freq' values
summary(sentiment$freq)
# Ensure 'freq' is numeric and filter out any NA values
sentiment$freq <- as.numeric(as.character(sentiment$freq))
sentiment <- sentiment %>% filter(!is.na(freq))  # Remove rows with NA frequencies
# Print the cleaned sentiment data
print(head(sentiment))
# Ensure 'color' is properly assigned (e.g., 'green' for positive, 'red' for negative)
sentiment$color <- ifelse(sentiment$sentiment == "positive", "green", "red")
# Create the word cloud directly
wordcloud2(sentiment, size = 0.5, color = sentiment$color)
# Manually test wordcloud2 with sentiment data
library(wordcloud2)
library(dplyr)
# Check the structure of sentiment data
str(sentiment)  # Check if 'freq' is numeric and if 'color' is properly formatted
# Ensure 'color' is properly assigned (e.g., 'green' for positive, 'red' for negative)
sentiment$color <- ifelse(sentiment$sentiment == "positive", "green", "red")
# Create a new dataframe with only 'word' and 'freq' columns for wordcloud2
wordcloud_data <- sentiment %>% select(word, freq)
# Create the word cloud directly
wordcloud2(wordcloud_data, size = 0.5, color = sentiment$color)
# Tokenize the text
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
# Tokenize the text
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
# Tokenize the text
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
# Tokenize the text
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
devtools::load_all()
# Tokenize the text
tokenized <- TokenizeText("This is wonderful and amazing but also terrible.")
# Perform sentiment analysis on the tokenized text
sentiment <- SentimentTokenized(tokenized)
# Create the word cloud with sentiment data
CreateSentimentWordCloud(sentiment, tokenized)
sentiment <- SentimentAnalysis("This is wonderful and amazing but also terrible.")
# Test the SentimentAnalysis function
library(dplyr)
# Sample text for sentiment analysis
sample_text <- "This is wonderful and amazing but also terrible."
# Perform sentiment analysis on the entire text
sentiment_result <- SentimentAnalysis(sample_text)
# Print the result to inspect the output
print(sentiment_result)
# Test the SentimentAnalysis function
library(dplyr)
# Sample text for sentiment analysis
sample_text <- "This is wonderful and amazing but also terrible."
# Perform sentiment analysis on the entire text
sentiment_result <- SentimentAnalysis(sample_text)
# Print the result to inspect the output
print(sentiment_result)
CreateSentimentWordCloud(sentiment_result, tokenized)
CreateSentimentWordCloud(sentiment_result, tokenized)
results <- TokenizeText(text)
text <- ("Banana Banana Banana Banana Orange Orange Grape")
results <- TokenizeText(text)
CreateWordCloud(results)
text <- ("Banana Banana Banana Banana Orange Orange Grape")
results <- TokenizeText(text)
str(results)
# Create a frequency table from the tokenized text
word_freq <- results %>%
group_by(word) %>%
summarise(freq = n())
# Check the frequency table
print(word_freq)
# Step 3: Create the word cloud
CreateWordCloud(word_freq)
text <- "Banana Banana Banana Banana Orange Orange Grape"
# Step 1: Tokenize the text
results <- TokenizeText(text)
# Step 2: Create the word cloud input data frame
# Ensure the column names are 'word' and 'freq' for compatibility with CreateWordCloud
word_freq <- results %>%
rename(word = word, freq = n)
# Step 3: Create the word cloud using the formatted data
CreateWordCloud(word_freq)
# Example text
text <- "Banana Banana Banana Banana Orange Orange Grape"
# Step 1: Tokenize the text
results <- TokenizeText(text)
# Step 2: Rename the column to 'count' for compatibility with CreateWordCloud
word_freq <- results %>%
rename(word = word, count = n)
# Check the data structure
print(word_freq)
# Step 3: Create the word cloud using the formatted data
CreateWordCloud(word_freq)
# Example text
text <- "Banana Banana Banana Banana Orange Orange Grape"
# Step 1: Tokenize the text
results <- TokenizeText(text)
# Step 2: Rename the column to 'count' for compatibility with CreateWordCloud
word_freq <- results %>%
rename(word = word, count = n)
# Check the data structure
print(word_freq)
# Step 3: Create the word cloud with adjusted settings
wordcloud2(word_freq, size = 0.5, min.freq = 1, max.words = 10, color = "random-light")
# Step 3: Create the word cloud with adjusted settings
wordcloud2(word_freq, min.freq = 1, max.words = 10, color = "random-light")
# Example text
text <- "Banana Banana Banana Banana Orange Orange Grape"
# Step 1: Tokenize the text
results <- TokenizeText(text)
# Step 2: Rename the column to 'count' for compatibility with CreateWordCloud
word_freq <- results %>%
rename(word = word, count = n)
# Check the data structure
print(word_freq)
# Step 3: Create the word cloud with adjusted settings
wordcloud2(word_freq, size = 0.5, color = "random-light")
devtools::load_all()
# Example text
text <- "Banana Banana Banana Banana Orange Orange Grape"
# Step 1: Tokenize the text
results <- TokenizeText(text)
devtools::load_all()
# Example text
text <- "Banana Banana Banana Banana Orange Orange Grape"
# Step 1: Tokenize the text
results <- TokenizeText(text)
CreateWordCloud(results)
CreateWordCloud(results)
# Example text
text <- "Banana Banana Banana Banana Orange Orange Grape"
CreateWordCloud(text)
text <- "This is a wonderful program, I hope nothing terrible ever happens to it. I hope that this is a good test as well!"
CreateWordCloud(text)
TokenizeText(text)
tokens <- TokenizeText(text)
SentimentTokenized(tokens)
sentimenttokens <- SentimentTokenized(tokens)
CreateSentimentWordCloud(sentimenttokens)
SentimentAnalysis(text)
sentimentresults <- SentimentAnalysis(text)
CreateSentimentWordCloud(sentimentresults)
devtools::load_all()
text <- "This is a wonderful program, I hope nothing terrible ever happens to it. I hope that this is a good test as well!"
CreateWordCloud(text)
tokens <- TokenizeText(text)
sentimenttokens <- SentimentTokenized(tokens)
CreateSentimentWordCloud(sentimenttokens)
sentimentresults <- SentimentAnalysis(text)
CreateSentimentWordCloud(sentimentresults)
devtools::load_all()
text <- "This is a wonderful program, I hope nothing terrible ever happens to it. I hope that this is a good test as well!"
CreateWordCloud(text)
tokens <- TokenizeText(text)
sentimenttokens <- SentimentTokenized(tokens)
CreateSentimentWordCloud(sentimenttokens)
sentimentresults <- SentimentAnalysis(text)
CreateSentimentWordCloud(sentimentresults)
devtools::load_all()
text <- "This is a wonderful program, I hope nothing terrible ever happens to it. I hope that this is a good test as well!"
CreateWordCloud(text)
tokens <- TokenizeText(text)
sentimenttokens <- SentimentTokenized(tokens)
CreateSentimentWordCloud(sentimenttokens)
sentimentresults <- SentimentAnalysis(text)
CreateSentimentWordCloud(sentimentresults)
devtools::document()
devtools::build()
devtools::install()
devtools::install()
devtools::check()
devtools::check()
